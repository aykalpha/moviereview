～環境構築～

▼事前準備
・下記のものを利用できる状態にしてください。
※基本的には、「Reactハンズオン」の環境構築を参考にしてもらえば問題ありません。
Docker Desktop for Windows
Ubuntu
WSL2
VSCode
Git（及びGIT）
DBeaver

▼Docker環境構築
・Dockerとは？
Dockerとは、アプリケーションの実行に必要な環境を「コンテナ」という単位で、まとめて管理できる仕組みです。
「Dockerfile」という設定ファイルに、必要なものを記述しておくことで、誰でも同じ環境を簡単に構築できます。
これにより、チーム内で環境差によるトラブルを防いだり、1台のPC上で異なるアプリケーションの開発環境を扱うことができるようになります。

・コンテナとは？
Dockerを使うと、API（バックエンド）、フロント（フロントエンド）、DB（データベース）といった構成を、それぞれ独立した「コンテナ」に分けて動かすことができます。
今回の研修でもそれぞれ、「Laravel（バックエンド）」「React（フロントエンド）」「Posgre（データベース）」の3つのコンテナに分けて構築しています。

まず、プロジェクトのディレクトリを作成しましょう。
@TODO：画像

その下に、下記の2つのファイルを作成して、配置しましょう。
(1)compose.yaml
@TODO：コード
@TODO：解説


(2)Dockerfile
@TODO：コード
@TODO：解説

▼Laravel
・プロジェクト作成
下記のコマンドで、laravelのプロジェクトを作成しましょう。
docker-compose run --rm app composer create-project laravel/laravel .
@TODO：解説

・.envの設定

・その他の設定
docker exec -it moviereview-laravel php artisan key:generate

・マイグレーション、シーダー
docker exec -it moviereview-laravel php artisan migrate:refresh --seed

▼React
・プロジェクト作成
docker-compose run --rm node npx create-react-app . --template typescript

▼コンテナを起動

▼DBeaverの接続設定
・キャプチャが必要

▼動作確認
・Laravel: http://localhost:8000
→ Laravelの初期ページが表示されることを確認します。
・React: http://localhost:3000
→ Reactの初期画面（Create React App）が表示されることを確認します。
・Posgre：DBeaver
→テスト接続が成功していることを確認

▼Gitリポジトリ作成
・Githubにコミット